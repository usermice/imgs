apiVersion: v1    # 版本号，例如v1
kind: Deployment    # 资源类型，例如 Pod、Deployment、Service、ReplicaSet、StatefulSet
metadata:   # POd相关的元数据，用于描述Pod数据
  name: java-demo   # Pod名称、在同一个名称空间内不能重复
  namespace: string   # Pod所属的命名空间,默认为"default"
  labels:   # 定义Pod的标签，只能使用字符串类型：string
  - name: java-demo   # 自定义label标签，key(键)为：name，value(值)为：java-demo
    version: v1.1.0   # 自定义版本
  annotations:    # 注释，不能作为被筛选
  - name: java-demo
        
spec:   # Pod中容器的详细定义
  replicas: 3   # 创建的副本数量
  revisionHistoryLimit: 10    # 滚动更新后保留的历史版本数
  selector:   # 选择器，用于找到匹配的 ReplicaSet(副本)
    matchLabels:    # 按照Labels标签匹配副本
    - name: java-demo   # 匹配的key，value
      version: v1.1.0

  strategy:   # 更新策略，StatefulSet更新使用：updateStrategy
    rollingUpdate:    # 滚动更新配置
      partition: 3    # 实现灰度/金丝雀发布，按序号更新，更新大于等于3的序号，不和百分比共用
      maxSurge: 25%   # 多少个/百分之多少Pods处于更新，数值越大更新越快，不稳定
      maxUnavailable: 25%   # 多少个/百分之多少Pods处于关闭，数值越小更新慢，稳定
    type: RollingUpdate   # 更新类型选择器，采用滚动更新，OnDelete：方式更新，删除pods时更新

  template:   # Pod 模板
    metadata:   # Pod 的元信息
      labels:   # Pod 的标签 
      - name: java-demo
        version: v1.1.0
    spec:   # Pod的期望信息
      nodeName: k8s-node1   # 设置NodeName表示将该Pod调度到指定到名称的node节点上
      nodeSelector: obeject   # 设置NodeSelector表示将该Pod调度到包含这个label的node上
      hostNetwork: false    # 是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络
      tolerations:  	# 容忍配置
      - effect: "污点的类型"  # Noschedule
        key: "污点的Key"  	# 污点的Key
        operate: "Equal"  	# Exists：匹配Key，Equal添加：value配置，
        value: "污点的value"  	# 污点的value
      imagePullSecrets:   # Pull镜像时使用的secret名称，以key：secretkey格式指定
      - name: docker-harbor   # 指定使用的secret库房名称
      containers:   # 对于 Pod中容器描述
      - name: tomcat-demo   # 指定容器名称，不可更新
        image: 192.168.80.210:8080/test/tomcat-demo:v1    # 镜像仓库地址
        imagePullPolicy: [ Always | Never | IfNotPresent ]    # 镜像拉取方式
        command: [string]   # 以数组方式指定容器启动命令列表，如不指定，使用打包时使用的启动命令
        args:   # 以数组方式指定容器启动命令参数列表，替代docker的CMD指令
        - /bin/sh
        - -c
        - touch /tmp/healthy; sleep 30; rm -fr /tmp/healthy; sleep 600    # 不能超过探针执行时间
        workingDir: string    # 容器启动后进入的工作目录，不指定则使用镜像默认值
        
        volumeMounts:   # 挂载到容器内部的存储卷配置
        - name: data    # 引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名
          mountPath: /opt/data    # 存储卷在容器内mount的绝对路径，应少于512字符
          readOnly: boolean   # 是否为只读模式
            
        ports:    # 需要暴露的端口库号列表
        - name: http    # 为端口取名，该名称可以在service种被引用
          containerPort: int    # 容器需要监听的端口号
          hostPort: int   # 容器所在主机需要监听的端口号，默认与Container相同
          protocol: TCP   # 端口协议，支持TCP和UDP，默认TCP
          targetPort: 80    # Pod 本身服务端口，比如Nginx：80，Tomcat：8080
          nodePort: 30001   # 节点对外端口
            
        env:    # 容器运行前需设置的环境变量列表
        - name: JAVA_OPTS   # 环境变量名称
          value: "-Xmx1g"   # 环境变量的值
          
        resources:    # 资源限制和请求的设置
          limits:   # 限定Pod最大使用硬件资源、通常设置cpu和memory
            cpu: "1"    # Cpu的限制，单位为core数，将用于docker run --cpu-shares参数，1000m等于一个核心
            memory: "1Gi"   # 内存限制，单位可以为Mib/Gib，将用于docker run --memory参数
          requests:   # 最低资源要求，在scheduler中被用到，通常设置cpu和memory
            cpu: "0.5"    # 限定使用几个核心CPU、容器启动的初始可用数量
            memory: "256Mi"   # 设定使用内存、容器启动的初始可用数量
            
        lifecycle:    # 生命周期钩子
          postStart:    # 容器启动后立即执行此钩子,如果执行失败,会根据重启策略进行重启
            exec:
              command: ["/bin/sh","-c","echo Hello from the postStart handler >/usr/share/message"]
          preStop:    # 容器终止前执行此钩子,无论结果如何,容器都会终止
            exec:
              command: ["/bin/sh","-c","nginx -s quit; while killall -0 nginx; do sleep 1; done"]
    
          startupProbe:
            tcpSocket:    # 使用TcpSocket、httpGet健康检查
              port: 8010    # 探测8010端口
            failureThreshold: 5   # 检测失败5次表示未就绪
            initialDelaySeconds: 60   # 指定容器启动60s之后开始执行Liveness探测，
            periodSeconds: 10   # 指定每10秒执行一次Liveness探测。
            successThreshold: 1   # 检查成功为2次表示就绪
            timeoutSeconds: 5   # 检测失败1次表示未就绪
    
        livenessProbe:    # 对Pod内各容器健康检查的设置，当探测无响应几次后将自动重启该容器
          exec:   # 对Pod容器内检查方式设置为exec方式
            command:    # exec方式需要制定的命令或脚本
            - sh
            - c
            - "sleep 5; echo 'success';"
      
          httpGet:    # 对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port
            path: /   # URI地址：http://:80/index.html
            port: 8010
            host: 192.168.109.100   # 主机地址
            scheme: HTTP    # 支持的协议，http或者https
            HttpHeaders:
            - name: string
              value: string(字符串)
      
          tcpSocket:    # 对Pod内个容器健康检查方式设置为tcpSocket方式
            port: 8010
            initialDelaySeconds: 60   # 容器启动完成后首次探测的时间，单位为秒
            timeoutSeconds: 5   # 对容器健康检查探测等待响应的超时时间，单位秒，默认1秒
            periodSeconds: 10   # 对容器监控检查的定期探测时间设置，单位秒，默认10秒一次
            successThreshold: 1   # 配置为：1，表示检查一次成功就成功，配置为：3，表示检查3次
            failureThreshold: 5   # 失败次数，检查5次失败表示失败
            securityContext:
            privileged: false

      restartPolicy: [Always | Never | OnFailure]   # Pod的重启策略
      terminationGracePeriodSeconds: 30   # 删除pods、deployment后等待时间

      volumes:    # 在该pod上定义共享存储卷列表
      - name: logs-volume   # 共享存储卷名称 （volumes类型有很多种）
        emptyDir: {}    # 类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值
    
        hostPath:   # 类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录
          path: /root/logs    # Pod所在宿主机的目录，将被用于同期中mount的目录
          type: DirectoryOrCreate   # 目录存在就使用，不存在就先创建再使用
        secret:   # 类型为secret的存储卷，挂载集群与定义的secret对象到容器内部
          scretname: secret
          items:
          - key: string
            path: string
    
        configMap:    # 类型为configMap的存储卷，挂载预定义的configMap对象到容器内部
          name: configmap
          items:
          - key: string
            path: string
